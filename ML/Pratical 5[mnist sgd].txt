Practical 5

from sklearn.datasets import fetch_openml
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDClassifier
import numpy as np

mnist= fetch_openml('mnist_784', version=1)
X,y = mnist["data"], mnist["target"]
print(X)
print(y)
#----------------------------------------------------------------------------------------

y = y.astype(np.uint8)
X_train, X_test, y_train, y_test = X[:60000],X[60000:],y[:60000],y[60000:]
y_train_5 = (y_train==5)
y_test_5 = (y_test==1)

sgd_clf = SGDClassifier(random_state = 42)
sgd_clf.fit(X_train, y_train_5)
some_digit = X.to_numpy()[66]
print(sgd_clf.predict([some_digit]))

sgd_clf.fit(X_test, y_test_5)
some_digit2 = X.to_numpy()[3]
print(sgd_clf.predict([some_digit2]))

some_digit_image=some_digit.reshape(28,28)
plt.imshow(some_digit_image, cmap = mpl.cm.binary, interpolation = "nearest")
plt.axis("off")
plt.show()

some_digit_image2=some_digit2.reshape(28,28)
plt.imshow(some_digit_image2, cmap = mpl.cm.binary, interpolation = "nearest")
plt.axis("off")
plt.show()
#-----------------------------------------------------------------------------------------

y = y.astype(np.uint8)
X_train, X_test, y_train, y_test = X[:60000],X[60000:],y[:60000],y[60000:]
y_train_5 = (y_train==5)
y_test_5 = (y_test==1)

sgd_clf = SGDClassifier(random_state = 42)
sgd_clf.fit(X_train, y_train_5)

for i in range(0,60000):
    some_digit = X.to_numpy()[i]
    print(sgd_clf.predict([some_digit]))

    some_digit_image=some_digit.reshape(28,28)
    plt.imshow(some_digit_image, cmap = mpl.cm.binary, interpolation = "nearest")
    plt.axis("off")
    plt.show()


