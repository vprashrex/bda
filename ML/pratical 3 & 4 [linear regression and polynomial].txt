Practical 3
A: Perform linear regression on given data showcasing predictions and visualization

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

score_df=pd.read_csv(os.path.abspath("employee.csv"))
print(score_df.head())
X=score_df.iloc[:,1:-1].values
Y=score_df.iloc[:, -1].values
print("x=",X,"\n y=",Y)
X_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size=0.2, random_state=0)
print("x_train=",X_train,"\n Y_train=", Y_train)
print("x_test=",X_test,"\n Y_test=", Y_test)
lin_reg=LinearRegression()
lin_reg.fit(X_train, Y_train)
Y_pred=lin_reg.predict(X_test)
print("Y_pred=", Y_pred)
plt.scatter(X,Y,color='red')
plt.plot(X,lin_reg.predict(X),color='blue')
plt.title('Truth of Bluff(Linear Regression)')
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.show()


------------------------------------------------------------------------------------------------------------------------------------------------------------------
B: Perform polynomial regression  on given data showcasing predictions and visualition

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

score_df=pd.read_csv(os.path.abspath("employee.csv"))
print(score_df.head())
X=score_df.iloc[:,1:-1].values
Y=score_df.iloc[:, -1].values
print("x=",X,"\n y=",Y)
X_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size=0.2, random_state=0)
print("x_train=",X_train,"\n Y_train=", Y_train)
print("x_test=",X_test,"\n Y_test=", Y_test)
lin_reg=LinearRegression()
lin_reg.fit(X_train, Y_train)
Y_pred=lin_reg.predict(X_test)
print("Y_pred=", Y_pred)
plt.scatter(X,Y,color='red')
plt.plot(X,lin_reg.predict(X),color='blue')
plt.title('Truth of Bluff(Linear Regression)')
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.show()
